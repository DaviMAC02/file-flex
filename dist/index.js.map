{"version":3,"sources":["../src/index.ts","../src/providers/storage/implementations/AwsS3.provider.ts","../src/providers/storage/implementations/AzureBlob.provider.ts","../src/providers/storage/implementations/LocalStorage.provider.ts"],"sourcesContent":["/**\n * @fileoverview This file is the entry point of the FileFlex SDK.\n * @description It exports all the public classes and functions of the SDK.\n */\n\nimport { AwsStorageProvider } from \"./providers/storage/implementations/AwsS3.provider\";\nimport { AzureStorageProvider } from \"./providers/storage/implementations/AzureBlob.provider\";\nimport { LocalStorageProvider } from \"./providers/storage/implementations/LocalStorage.provider\";\nimport { FileFlexClientConstructorDto, Provider } from \"./types\";\n\nexport class FileFlexClient {\n  private AWS_BUCKET_NAME;\n\n  private AWS_ACCESS_KEY;\n\n  private AWS_SECRET_ACCESS_KEY;\n\n  private AZURE_CONNECTION_STRING;\n\n  private AZURE_CONTAINER_NAME;\n\n  private LOCAL;\n\n  constructor(params: FileFlexClientConstructorDto) {\n    this.AWS_BUCKET_NAME = params?.AWS_BUCKET_NAME;\n    this.AWS_ACCESS_KEY = params?.AWS_ACCESS_KEY;\n    this.AWS_SECRET_ACCESS_KEY = params?.AWS_SECRET_ACCESS_KEY;\n    this.AZURE_CONNECTION_STRING = params?.AZURE_CONNECTION_STRING;\n    this.AZURE_CONTAINER_NAME = params?.AZURE_CONTAINER_NAME;\n    this.LOCAL = params?.LOCAL;\n  }\n\n  private _detectProvider(): Provider {\n    if (this.LOCAL) {\n      return \"LocalStorage\";\n    }\n\n    if (this.AWS_BUCKET_NAME && this.AWS_ACCESS_KEY && this.AWS_SECRET_ACCESS_KEY) {\n      return \"AWS\";\n    }\n\n    if (this.AZURE_CONNECTION_STRING && this.AZURE_CONTAINER_NAME) {\n      return \"Azure\";\n    }\n\n    throw new Error(\"No provider found\");\n  }\n\n  public async upload(fileContent: Buffer, key: string): Promise<void> {\n    const provider = this._detectProvider();\n\n    switch (provider) {\n      case \"AWS\":\n        if (!this.AWS_BUCKET_NAME) {\n          throw new Error(\"AWS_BUCKET_NAME is required\");\n        }\n\n        const awsProvider = new AwsStorageProvider(this.AWS_BUCKET_NAME!, this.AWS_ACCESS_KEY!, this.AWS_SECRET_ACCESS_KEY!);\n\n        await awsProvider.save(key, fileContent.toString());\n        break;\n      case \"Azure\":\n        if (!this.AZURE_CONNECTION_STRING || !this.AZURE_CONTAINER_NAME) {\n          throw new Error(\n            \"AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required\"\n          );\n        }\n\n        const azureProvider = new AzureStorageProvider(\n          this.AZURE_CONNECTION_STRING!,\n          this.AZURE_CONTAINER_NAME!\n        );\n\n        await azureProvider.save(key, fileContent.toString());\n        break;\n      case \"LocalStorage\":\n        if (!this.LOCAL) {\n          throw new Error(\"LOCAL must be true\");\n        }\n\n        const localStorageProvider = new LocalStorageProvider();\n        await localStorageProvider.save(key, fileContent.toString());\n        break;\n    }\n  }\n\n  public async download(key: string): Promise<string | undefined> {\n    const provider = this._detectProvider();\n\n    switch (provider) {\n      case \"AWS\":\n        if (!this.AWS_BUCKET_NAME) {\n          throw new Error(\"AWS_BUCKET_NAME is required\");\n        }\n\n        const awsProvider = new AwsStorageProvider(this.AWS_BUCKET_NAME!, this.AWS_ACCESS_KEY!, this.AWS_SECRET_ACCESS_KEY!);\n\n        return await awsProvider.retrieve(key);\n      case \"Azure\":\n        if (!this.AZURE_CONNECTION_STRING || !this.AZURE_CONTAINER_NAME) {\n          throw new Error(\n            \"AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required\"\n          );\n        }\n\n        const azureProvider = new AzureStorageProvider(\n          this.AZURE_CONNECTION_STRING!,\n          this.AZURE_CONTAINER_NAME!\n        );\n\n        return await azureProvider.retrieve(key);\n      case \"LocalStorage\":\n        if (!this.LOCAL) {\n          throw new Error(\"LOCAL must be true\");\n        }\n\n        const localStorageProvider = new LocalStorageProvider();\n\n        return await localStorageProvider.retrieve(key);\n    }\n  }\n\n  public async delete(key: string): Promise<void> {\n    const provider = this._detectProvider();\n\n    switch (provider) {\n      case \"AWS\":\n        if (!this.AWS_BUCKET_NAME) {\n          throw new Error(\"AWS_BUCKET_NAME is required\");\n        }\n\n        const awsProvider = new AwsStorageProvider(this.AWS_BUCKET_NAME!, this.AWS_ACCESS_KEY!, this.AWS_SECRET_ACCESS_KEY!);\n\n        await awsProvider.delete(key);\n        break;\n      case \"Azure\":\n        if (!this.AZURE_CONNECTION_STRING || !this.AZURE_CONTAINER_NAME) {\n          throw new Error(\n            \"AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required\"\n          );\n        }\n\n        const azureProvider = new AzureStorageProvider(\n          this.AZURE_CONNECTION_STRING!,\n          this.AZURE_CONTAINER_NAME!\n        );\n\n        await azureProvider.delete(key);\n        break;\n      case \"LocalStorage\":\n        if (!this.LOCAL) {\n          throw new Error(\"LOCAL must be true\");\n        }\n\n        const localStorageProvider = new LocalStorageProvider();\n\n        await localStorageProvider.delete(key);\n        break;\n    }\n  }\n\n  public async list(): Promise<(string | undefined)[] | undefined> {\n    const provider = this._detectProvider();\n\n    switch (provider) {\n      case \"AWS\":\n        if (!this.AWS_BUCKET_NAME) {\n          throw new Error(\"AWS_BUCKET_NAME is required\");\n        }\n\n        const awsProvider = new AwsStorageProvider(this.AWS_BUCKET_NAME!, this.AWS_ACCESS_KEY!, this.AWS_SECRET_ACCESS_KEY!);\n\n        return await awsProvider.list();\n      case \"Azure\":\n        if (!this.AZURE_CONNECTION_STRING || !this.AZURE_CONTAINER_NAME) {\n          throw new Error(\n            \"AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required\"\n          );\n        }\n\n        const azureProvider = new AzureStorageProvider(\n          this.AZURE_CONNECTION_STRING!,\n          this.AZURE_CONTAINER_NAME!\n        );\n\n        return await azureProvider.list();\n      case \"LocalStorage\":\n        if (!this.LOCAL) {\n          throw new Error(\"LOCAL must be true\");\n        }\n\n        const localStorageProvider = new LocalStorageProvider();\n\n        return await localStorageProvider.list();\n    }\n  }\n}\n","import * as AWS from \"aws-sdk\";\nimport { S3 } from \"aws-sdk\";\nimport { IStorageProvider } from \"../interfaces/IStorageProvider\";\n\nexport class AwsStorageProvider implements IStorageProvider {\n  private s3: S3;\n  private bucketName: string;\n\n  constructor(bucketName: string, accessKey: string, secretAccessKey: string) {\n    this.s3 = new S3({\n      credentials: {\n        accessKeyId: accessKey,\n        secretAccessKey,\n      },\n    })\n    this.bucketName = bucketName;\n  }\n\n  async save(key: string, value: string): Promise<void> {\n    await this.s3\n      .putObject({\n        Bucket: this.bucketName,\n        Key: key,\n        Body: value,\n      })\n      .promise();\n  }\n\n  async retrieve(key: string): Promise<string | undefined> {\n    const data = await this.s3\n      .getObject({\n        Bucket: this.bucketName,\n        Key: key,\n      })\n      .promise();\n\n    return data?.Body?.toString();\n  }\n\n  async list(): Promise<(string | undefined)[] | undefined> {\n    const data = await this.s3\n      .listObjectsV2({\n        Bucket: this.bucketName,\n      })\n      .promise();\n\n    return data.Contents?.map((content) => content.Key) || [];\n  }\n\n  async delete(key: string): Promise<void> {\n    await this.s3\n      .deleteObject({\n        Bucket: this.bucketName,\n        Key: key,\n      })\n      .promise();\n  }\n}\n","import { BlobServiceClient } from \"@azure/storage-blob\";\nimport { IStorageProvider } from \"../interfaces/IStorageProvider\";\n\nexport class AzureStorageProvider implements IStorageProvider {\n  private containerClient;\n\n  constructor(connectionString: string, containerName: string) {\n    const blobServiceClient =\n      BlobServiceClient.fromConnectionString(connectionString);\n    this.containerClient = blobServiceClient.getContainerClient(containerName);\n  }\n\n  async save(key: string, value: string): Promise<void> {\n    const blockBlobClient = this.containerClient.getBlockBlobClient(key);\n    await blockBlobClient.upload(value, value.length);\n  }\n\n  async retrieve(key: string): Promise<string> {\n    const blockBlobClient = this.containerClient.getBlockBlobClient(key);\n    const downloadBlockBlobResponse = await blockBlobClient.download(0);\n    const data = await streamToString(\n      downloadBlockBlobResponse.readableStreamBody\n    );\n    return data;\n  }\n\n  async list(): Promise<(string | undefined)[] | undefined> {\n    const blobItems = this.containerClient.listBlobsFlat();\n    const keys: string[] = [];\n    for await (const blobItem of blobItems) {\n      keys.push(blobItem.name);\n    }\n    return keys;\n  }\n\n  async delete(key: string): Promise<void> {\n    const blockBlobClient = this.containerClient.getBlockBlobClient(key);\n    await blockBlobClient.delete();\n  }\n}\n\nasync function streamToString(\n  readableStream: NodeJS.ReadableStream | undefined\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const chunks: string[] = [];\n    readableStream?.on(\"data\", (data) => {\n      chunks.push(data.toString());\n    });\n    readableStream?.on(\"end\", () => {\n      resolve(chunks.join(\"\"));\n    });\n    readableStream?.on(\"error\", reject);\n  });\n}\n","import { IStorageProvider } from \"../interfaces/IStorageProvider\";\nimport fs from 'fs';\n\nexport class LocalStorageProvider implements IStorageProvider {\n  private localStorage = 'src/storage/localStorage';\n  async save(key: string, value: string): Promise<void> {\n    await this._writeFile(key, value);\n  }\n\n  async retrieve(key: string): Promise<string | undefined> {\n    try {\n      return await this._readFile(key);\n    } catch (err) {\n      return undefined;\n    }\n  }\n\n  async list(): Promise<string[]> {\n    const files = await fs.promises.readdir(this.localStorage);\n    return files;\n  }\n\n  async delete(key: string): Promise<void> {\n    await this._deleteFile(key);\n  }\n\n  private async _writeFile(key: string, value: string): Promise<void> {\n    await fs.promises.writeFile(`${this.localStorage}/${key}`, value);\n  }\n\n  private async _readFile(key: string): Promise<string> {\n    return await fs.promises.readFile(`${this.localStorage}/${key}`, 'utf-8');\n  }\n\n  private async _deleteFile(key: string): Promise<void> {\n    await fs.promises.unlink(`${this.localStorage}/${key}`);\n  }\n}\n"],"mappings":"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","names":["src_exports","__export","FileFlexClient","__toCommonJS","import_aws_sdk","AwsStorageProvider","bucketName","accessKey","secretAccessKey","key","value","_a","data","content","import_storage_blob","AzureStorageProvider","connectionString","containerName","blobServiceClient","key","value","downloadBlockBlobResponse","streamToString","blobItems","keys","blobItem","readableStream","resolve","reject","chunks","data","import_fs","LocalStorageProvider","key","value","fs","FileFlexClient","params","fileContent","key","AwsStorageProvider","AzureStorageProvider","LocalStorageProvider"]}