"use strict";var S=Object.create;var _=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var v=(i,t)=>{for(var e in t)_(i,e,{get:t[e],enumerable:!0})},N=(i,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of h(t))!w.call(i,o)&&o!==e&&_(i,o,{get:()=>t[o],enumerable:!(r=l(t,o))||r.enumerable});return i};var g=(i,t,e)=>(e=i!=null?S(u(i)):{},N(t||!i||!i.__esModule?_(e,"default",{value:i,enumerable:!0}):e,i)),R=i=>N(_({},"__esModule",{value:!0}),i);var O={};v(O,{FileFlexClient:()=>c});module.exports=R(O);var a=require("aws-sdk"),s=class{constructor(t,e,r){this.s3=new a.S3({credentials:{accessKeyId:e,secretAccessKey:r}}),this.bucketName=t}async save(t,e){await this.s3.putObject({Bucket:this.bucketName,Key:t,Body:e}).promise()}async retrieve(t){var r;let e=await this.s3.getObject({Bucket:this.bucketName,Key:t}).promise();return(r=e==null?void 0:e.Body)==null?void 0:r.toString()}async list(){var e;return((e=(await this.s3.listObjectsV2({Bucket:this.bucketName}).promise()).Contents)==null?void 0:e.map(r=>r.Key))||[]}async delete(t){await this.s3.deleteObject({Bucket:this.bucketName,Key:t}).promise()}};var d=require("@azure/storage-blob"),n=class{constructor(t,e){let r=d.BlobServiceClient.fromConnectionString(t);this.containerClient=r.getContainerClient(e)}async save(t,e){await this.containerClient.getBlockBlobClient(t).upload(e,e.length)}async retrieve(t){let r=await this.containerClient.getBlockBlobClient(t).download(0);return await T(r.readableStreamBody)}async list(){let t=this.containerClient.listBlobsFlat(),e=[];for await(let r of t)e.push(r.name);return e}async delete(t){await this.containerClient.getBlockBlobClient(t).delete()}};async function T(i){return new Promise((t,e)=>{let r=[];i==null||i.on("data",o=>{r.push(o.toString())}),i==null||i.on("end",()=>{t(r.join(""))}),i==null||i.on("error",e)})}var A=g(require("fs")),E=class{constructor(){this.localStorage="src/storage/localStorage"}async save(t,e){await this._writeFile(t,e)}async retrieve(t){try{return await this._readFile(t)}catch{return}}async list(){return await A.default.promises.readdir(this.localStorage)}async delete(t){await this._deleteFile(t)}async _writeFile(t,e){await A.default.promises.writeFile(`${this.localStorage}/${t}`,e)}async _readFile(t){return await A.default.promises.readFile(`${this.localStorage}/${t}`,"utf-8")}async _deleteFile(t){await A.default.promises.unlink(`${this.localStorage}/${t}`)}};var c=class{constructor(t){this.AWS_BUCKET_NAME=t==null?void 0:t.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY=t==null?void 0:t.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY=t==null?void 0:t.AWS_SECRET_ACCESS_KEY,this.AZURE_CONNECTION_STRING=t==null?void 0:t.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME=t==null?void 0:t.AZURE_CONTAINER_NAME,this.LOCAL=t==null?void 0:t.LOCAL}_detectProvider(){if(this.LOCAL)return"LocalStorage";if(this.AWS_BUCKET_NAME&&this.AWS_ACCESS_KEY&&this.AWS_SECRET_ACCESS_KEY)return"AWS";if(this.AZURE_CONNECTION_STRING&&this.AZURE_CONTAINER_NAME)return"Azure";throw new Error("No provider found")}async upload(t,e){switch(this._detectProvider()){case"AWS":if(!this.AWS_BUCKET_NAME)throw new Error("AWS_BUCKET_NAME is required");await new s(this.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY).save(e,t.toString());break;case"Azure":if(!this.AZURE_CONNECTION_STRING||!this.AZURE_CONTAINER_NAME)throw new Error("AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required");await new n(this.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME).save(e,t.toString());break;case"LocalStorage":if(!this.LOCAL)throw new Error("LOCAL must be true");await new E().save(e,t.toString());break}}async download(t){switch(this._detectProvider()){case"AWS":if(!this.AWS_BUCKET_NAME)throw new Error("AWS_BUCKET_NAME is required");return await new s(this.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY).retrieve(t);case"Azure":if(!this.AZURE_CONNECTION_STRING||!this.AZURE_CONTAINER_NAME)throw new Error("AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required");return await new n(this.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME).retrieve(t);case"LocalStorage":if(!this.LOCAL)throw new Error("LOCAL must be true");return await new E().retrieve(t)}}async delete(t){switch(this._detectProvider()){case"AWS":if(!this.AWS_BUCKET_NAME)throw new Error("AWS_BUCKET_NAME is required");await new s(this.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY).delete(t);break;case"Azure":if(!this.AZURE_CONNECTION_STRING||!this.AZURE_CONTAINER_NAME)throw new Error("AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required");await new n(this.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME).delete(t);break;case"LocalStorage":if(!this.LOCAL)throw new Error("LOCAL must be true");await new E().delete(t);break}}async list(){switch(this._detectProvider()){case"AWS":if(!this.AWS_BUCKET_NAME)throw new Error("AWS_BUCKET_NAME is required");return await new s(this.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY).list();case"Azure":if(!this.AZURE_CONNECTION_STRING||!this.AZURE_CONTAINER_NAME)throw new Error("AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required");return await new n(this.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME).list();case"LocalStorage":if(!this.LOCAL)throw new Error("LOCAL must be true");return await new E().list()}}};0&&(module.exports={FileFlexClient});
//# sourceMappingURL=index.js.map