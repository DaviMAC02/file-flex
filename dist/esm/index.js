import{S3 as C}from"aws-sdk";var o=class{constructor(t,e,i){this.s3=new C({credentials:{accessKeyId:e,secretAccessKey:i}}),this.bucketName=t}async save(t,e){await this.s3.putObject({Bucket:this.bucketName,Key:t,Body:e}).promise()}async retrieve(t){var i;let e=await this.s3.getObject({Bucket:this.bucketName,Key:t}).promise();return(i=e==null?void 0:e.Body)==null?void 0:i.toString()}async list(){var e;return((e=(await this.s3.listObjectsV2({Bucket:this.bucketName}).promise()).Contents)==null?void 0:e.map(i=>i.Key))||[]}async delete(t){await this.s3.deleteObject({Bucket:this.bucketName,Key:t}).promise()}};import{BlobServiceClient as N}from"@azure/storage-blob";var s=class{constructor(t,e){let i=N.fromConnectionString(t);this.containerClient=i.getContainerClient(e)}async save(t,e){await this.containerClient.getBlockBlobClient(t).upload(e,e.length)}async retrieve(t){let i=await this.containerClient.getBlockBlobClient(t).download(0);return await a(i.readableStreamBody)}async list(){let t=this.containerClient.listBlobsFlat(),e=[];for await(let i of t)e.push(i.name);return e}async delete(t){await this.containerClient.getBlockBlobClient(t).delete()}};async function a(r){return new Promise((t,e)=>{let i=[];r==null||r.on("data",E=>{i.push(E.toString())}),r==null||r.on("end",()=>{t(i.join(""))}),r==null||r.on("error",e)})}import A from"fs";var n=class{constructor(){this.localStorage="src/storage/localStorage"}async save(t,e){await this._writeFile(t,e)}async retrieve(t){try{return await this._readFile(t)}catch{return}}async list(){return await A.promises.readdir(this.localStorage)}async delete(t){await this._deleteFile(t)}async _writeFile(t,e){await A.promises.writeFile(`${this.localStorage}/${t}`,e)}async _readFile(t){return await A.promises.readFile(`${this.localStorage}/${t}`,"utf-8")}async _deleteFile(t){await A.promises.unlink(`${this.localStorage}/${t}`)}};var c=class{constructor(t){this.AWS_BUCKET_NAME=t==null?void 0:t.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY=t==null?void 0:t.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY=t==null?void 0:t.AWS_SECRET_ACCESS_KEY,this.AZURE_CONNECTION_STRING=t==null?void 0:t.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME=t==null?void 0:t.AZURE_CONTAINER_NAME,this.LOCAL=t==null?void 0:t.LOCAL}_detectProvider(){if(this.LOCAL)return"LocalStorage";if(this.AWS_BUCKET_NAME&&this.AWS_ACCESS_KEY&&this.AWS_SECRET_ACCESS_KEY)return"AWS";if(this.AZURE_CONNECTION_STRING&&this.AZURE_CONTAINER_NAME)return"Azure";throw new Error("No provider found")}async upload(t,e){switch(this._detectProvider()){case"AWS":if(!this.AWS_BUCKET_NAME)throw new Error("AWS_BUCKET_NAME is required");await new o(this.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY).save(e,t.toString());break;case"Azure":if(!this.AZURE_CONNECTION_STRING||!this.AZURE_CONTAINER_NAME)throw new Error("AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required");await new s(this.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME).save(e,t.toString());break;case"LocalStorage":if(!this.LOCAL)throw new Error("LOCAL must be true");await new n().save(e,t.toString());break}}async download(t){switch(this._detectProvider()){case"AWS":if(!this.AWS_BUCKET_NAME)throw new Error("AWS_BUCKET_NAME is required");return await new o(this.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY).retrieve(t);case"Azure":if(!this.AZURE_CONNECTION_STRING||!this.AZURE_CONTAINER_NAME)throw new Error("AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required");return await new s(this.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME).retrieve(t);case"LocalStorage":if(!this.LOCAL)throw new Error("LOCAL must be true");return await new n().retrieve(t)}}async delete(t){switch(this._detectProvider()){case"AWS":if(!this.AWS_BUCKET_NAME)throw new Error("AWS_BUCKET_NAME is required");await new o(this.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY).delete(t);break;case"Azure":if(!this.AZURE_CONNECTION_STRING||!this.AZURE_CONTAINER_NAME)throw new Error("AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required");await new s(this.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME).delete(t);break;case"LocalStorage":if(!this.LOCAL)throw new Error("LOCAL must be true");await new n().delete(t);break}}async list(){switch(this._detectProvider()){case"AWS":if(!this.AWS_BUCKET_NAME)throw new Error("AWS_BUCKET_NAME is required");return await new o(this.AWS_BUCKET_NAME,this.AWS_ACCESS_KEY,this.AWS_SECRET_ACCESS_KEY).list();case"Azure":if(!this.AZURE_CONNECTION_STRING||!this.AZURE_CONTAINER_NAME)throw new Error("AZURE_CONNECTION_STRING and AZURE_CONTAINER_NAME are required");return await new s(this.AZURE_CONNECTION_STRING,this.AZURE_CONTAINER_NAME).list();case"LocalStorage":if(!this.LOCAL)throw new Error("LOCAL must be true");return await new n().list()}}};export{c as FileFlexClient};
//# sourceMappingURL=index.js.map